import { UseUserBilling, Context, FactoryParams } from '../types';
export interface UseUserBillingFactoryParams<USER_BILLING, USER_BILLING_ITEM> extends FactoryParams {
    addAddress: (context: Context, params: {
        address: Readonly<USER_BILLING_ITEM>;
        billing: Readonly<USER_BILLING>;
    }) => Promise<USER_BILLING>;
    deleteAddress: (context: Context, params: {
        address: Readonly<USER_BILLING_ITEM>;
        billing: Readonly<USER_BILLING>;
    }) => Promise<USER_BILLING>;
    updateAddress: (context: Context, params: {
        address: Readonly<USER_BILLING_ITEM>;
        billing: Readonly<USER_BILLING>;
    }) => Promise<USER_BILLING>;
    load: (context: Context, params: {
        billing: Readonly<USER_BILLING>;
    }) => Promise<USER_BILLING>;
    setDefaultAddress: (context: Context, params: {
        address: Readonly<USER_BILLING_ITEM>;
        billing: Readonly<USER_BILLING>;
    }) => Promise<USER_BILLING>;
}
export declare const useUserBillingFactory: <USER_BILLING, USER_BILLING_ITEM>(factoryParams: UseUserBillingFactoryParams<USER_BILLING, USER_BILLING_ITEM>) => () => UseUserBilling<USER_BILLING, USER_BILLING_ITEM>;
