import { UseUserShipping, Context, FactoryParams } from '../types';
export interface UseUserShippingFactoryParams<USER_SHIPPING, USER_SHIPPING_ITEM> extends FactoryParams {
    addAddress: (context: Context, params: {
        address: Readonly<USER_SHIPPING_ITEM>;
        shipping: Readonly<USER_SHIPPING>;
    }) => Promise<USER_SHIPPING>;
    deleteAddress: (context: Context, params: {
        address: Readonly<USER_SHIPPING_ITEM>;
        shipping: Readonly<USER_SHIPPING>;
    }) => Promise<USER_SHIPPING>;
    updateAddress: (context: Context, params: {
        address: Readonly<USER_SHIPPING_ITEM>;
        shipping: Readonly<USER_SHIPPING>;
    }) => Promise<USER_SHIPPING>;
    load: (context: Context, params: {
        shipping: Readonly<USER_SHIPPING>;
    }) => Promise<USER_SHIPPING>;
    setDefaultAddress: (context: Context, params: {
        address: Readonly<USER_SHIPPING_ITEM>;
        shipping: Readonly<USER_SHIPPING>;
    }) => Promise<USER_SHIPPING>;
}
export declare const useUserShippingFactory: <USER_SHIPPING, USER_SHIPPING_ITEM>(factoryParams: UseUserShippingFactoryParams<USER_SHIPPING, USER_SHIPPING_ITEM>) => () => UseUserShipping<USER_SHIPPING, USER_SHIPPING_ITEM>;
